from typing import Any, Dict
import json
from ..chunks import Chunk
from ..utils import info_exponential_backoff
from .fuser_base import BaseFuser
from ..llm.generator import LLMGenerator

@BaseFuser.register_fuser('language_fuser')
class LanguageFuser(BaseFuser):
    def init_fuser(self, model_name: str = "gpt-4o-mini", *args: Any, **kwargs: Any) -> None:
        self.llm_generator = LLMGenerator(
            generator_name=model_name,
            max_tokens=300,
            temperature=0.7
        )
    
    @info_exponential_backoff(retries=5, base_wait_time=1)
    def fuse_info(self, chunk1: Chunk, chunk2: Chunk) -> str | None:
        gist1, gist2 = chunk1.gist, chunk2.gist
        
        prompt = f"The following two gists are related and can contain new information when combining them together: 1.{gist1} and 2.{gist2}. Describe the new information generated by combining the two gists:"
        system_prompt = "You are an information fusion assistant. Combine related information and identify new insights."
        
        response = self.llm_generator.generate_response(
            prompt=prompt,
            system_prompt=system_prompt
        )
        
        try:
            content = json.loads(response["content"])
            if isinstance(content, dict):
                answer = content.get("combined_insights", content.get("answer", content.get("fusion", None)))
            else:
                answer = content
        except (json.JSONDecodeError, AttributeError):
            answer = response["content"]
            
        return answer if answer else None
    
    def fuse_score(self, chunk1: Chunk, chunk2: Chunk) -> Dict[str, float]:
        relevance = chunk1.relevance + chunk2.relevance
        confidence = chunk1.confidence + chunk2.confidence
        surprise = chunk1.surprise + chunk2.surprise
        weight = relevance * confidence * surprise
        return {
            'relevance': relevance,
            'confidence': confidence,
            'surprise': surprise,
            'weight': weight,
        }